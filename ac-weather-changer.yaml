blueprint:
  name: AC Control with Fan Speed & ntfy Notifications (No Entity Defaults)
  description: >
    Turns on the AC if both the bedroom and outside temperature (from weather entity) are above the threshold, AND AC is not already on, AND only during sun up (between sunrise and sunset). Adjusts AC fan speed (Quiet, Low, Medium, High, Turbo) based on the outside temperature attribute. Notifies when AC is turned on or fan speed changes, with dynamic temperature and fan speed info. Lets you select ntfy (or any notify service) notification targets, as well as AC entity and temperature sensors. No default entities are set.
  domain: automation
  input:
    notify_targets:
      name: Notification targets
      description: Select one or more notify services or devices to send ntfy notifications
      selector:
        entity:
          domain: notify
          multiple: true
    ac_entity:
      name: AC Climate Entity
      description: The climate entity controlling your AC
      selector:
        entity:
          domain: climate
    bedroom_temp_sensor:
      name: Bedroom Temperature Sensor
      description: Sensor for bedroom temperature
      selector:
        entity:
          domain: sensor
          device_class: temperature
    outside_temp_weather:
      name: Outside Weather Entity
      description: Weather entity containing the outside temperature attribute
      selector:
        entity:
          domain: weather
    bedroom_temp_threshold:
      name: Bedroom Temp Threshold
      description: Minimum bedroom temperature to trigger AC
      default: 24.5
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: "°C"
    outside_temp_threshold:
      name: Outside Temp Threshold
      description: Minimum outside temperature to trigger AC
      default: 24.5
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: "°C"
    set_ac_temperature:
      name: Set AC Temperature
      description: The temperature to set your AC to when turning on
      default: 22
      selector:
        number:
          min: 16
          max: 30
          step: 0.5
          unit_of_measurement: "°C"

trigger:
  - platform: time_pattern
    minutes: "/10"

condition:
  - condition: numeric_state
    entity_id: !input bedroom_temp_sensor
    above: !input bedroom_temp_threshold
  - condition: template
    value_template: >
      {{ state_attr((inputs.outside_temp_weather if inputs is defined else ''), 'temperature') | float(0) > (inputs.outside_temp_threshold if inputs is defined else 24.5) }}
  - condition: sun
    after: sunrise
    before: sunset

variables:
  outside_temp: "{{ state_attr(inputs.outside_temp_weather, 'temperature') | float(0) }}"
  bedroom_temp: "{{ states(inputs.bedroom_temp_sensor) | float(0) }}"
  temp_threshold: !input bedroom_temp_threshold
  set_ac_temperature: !input set_ac_temperature
  ac_entity: !input ac_entity
  fan_speed: |-
    {% if outside_temp > 29 and outside_temp <= 30 %}
      Turbo
    {% elif outside_temp > 27 and outside_temp <= 29 %}
      High
    {% elif outside_temp > 25.5 and outside_temp <= 27 %}
      Medium
    {% elif outside_temp > temp_threshold and outside_temp <= 25.5 %}
      Low
    {% elif outside_temp > temp_threshold and outside_temp <= 25 %}
      Quiet
    {% else %}
      unknown
    {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not is_state(ac_entity, 'cool') }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: "{{ ac_entity }}"
          - service: climate.set_temperature
            data:
              entity_id: "{{ ac_entity }}"
              temperature: "{{ set_ac_temperature }}"
          - variables:
              notify_title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
              notify_message: "Turning on AC to {{ set_ac_temperature }}°C (fan: {{ fan_speed }})"
          - repeat:
              for_each: !input notify_targets
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notify_message }}"
                    title: "{{ notify_title }}"
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Turbo' and state_attr(ac_entity, 'fan_mode') != 'Turbo' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Turbo
          - variables:
              notify_title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
              notify_message: "Setting AC fan mode to Turbo"
          - repeat:
              for_each: !input notify_targets
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notify_message }}"
                    title: "{{ notify_title }}"
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'High' and state_attr(ac_entity, 'fan_mode') != 'High' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: High
          - variables:
              notify_title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
              notify_message: "Setting AC fan mode to High"
          - repeat:
              for_each: !input notify_targets
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notify_message }}"
                    title: "{{ notify_title }}"
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Medium' and state_attr(ac_entity, 'fan_mode') != 'Medium' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Medium
          - variables:
              notify_title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
              notify_message: "Setting AC fan mode to Medium"
          - repeat:
              for_each: !input notify_targets
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notify_message }}"
                    title: "{{ notify_title }}"
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Low' and state_attr(ac_entity, 'fan_mode') != 'Low' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Low
          - variables:
              notify_title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
              notify_message: "Setting AC fan mode to Low"
          - repeat:
              for_each: !input notify_targets
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notify_message }}"
                    title: "{{ notify_title }}"
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Quiet' and state_attr(ac_entity, 'fan_mode') != 'Quiet' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Quiet
          - variables:
              notify_title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
              notify_message: "Setting AC fan mode to Quiet"
          - repeat:
              for_each: !input notify_targets
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notify_message }}"
                    title: "{{ notify_title }}"

mode: single
