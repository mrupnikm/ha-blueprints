blueprint:
  name: AC Control Based on Room & Outside Temp, Fan Speed, and Notification (Sun Up Only)
  description: |-
    ## AC Control Automation (Template)
    This blueprint manages your bedroom AC based on:
    - Bedroom temperature sensor (user selectable)
    - Outside temperature (from a weather entity, user selectable)
    - AC climate entity (user selectable)
    **Logic:**
    - If both the bedroom and outside temperature are above the threshold (user selectable, default: 24.5°C), and it's between sunrise and sunset:
      - If the AC is not on, it will be turned on and set to your selected temperature.
      - The AC fan speed will be set based on the current outside temperature:
        - 24.5–25°C: Quiet
        - 25–25.5°C: Low
        - 25.5–27°C: Medium
        - 27–29°C: High
        - 29–30°C: Turbo
      - A notification is sent to your mobile device with dynamic info.
    - The automation only triggers if any of these actions would actually change the AC state or fan speed.
    ---
    **Entities to Select:**
    - Bedroom temperature sensor
    - Weather entity
    - Bedroom AC climate entity
    **Notification:**
    - Sent to your selected mobile device via the Home Assistant mobile app.
  domain: automation
  input:
    bedroom_temp_sensor:
      name: Bedroom Temperature Sensor
      description: "The sensor providing the bedroom temperature."
      selector:
        entity:
          domain: sensor
          device_class: temperature
    outside_weather_entity:
      name: Weather Entity
      description: "Weather entity providing the outside temperature."
      selector:
        entity:
          domain: weather
    bedroom_ac_climate:
      name: Bedroom AC Climate Entity
      description: "The climate entity controlling your bedroom AC."
      selector:
        entity:
          domain: climate
    mobile_notify_target:
      name: Mobile Notification Service
      description: "Enter your notify service (e.g. notify.mobile_app_pixel_9_pro)."
      default: "notify.mobile_app_pixel_9_pro"
      selector:
        text:
    temp_threshold:
      name: Temperature Threshold
      description: "Temperature threshold for both inside and outside to trigger AC (default: 24.5)."
      default: 24.5
      selector:
        number:
          min: 10
          max: 35
          step: 0.1
          unit_of_measurement: "°C"
    set_ac_temperature:
      name: Set AC Temperature On Turn On
      description: "The temperature to set your AC to when it is turned on (default: 22°C)."
      default: 22
      selector:
        number:
          min: 16
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
mode: single
trigger:
  - platform: time_pattern
    minutes: "/10"
variables:
  outside_temp: "{{ state_attr(blueprint.inputs.outside_weather_entity, 'temperature') | float(0) }}"
  bedroom_temp: "{{ states(blueprint.inputs.bedroom_temp_sensor) | float(0) }}"
  fan_speed: >-
    {% set threshold = temp_threshold | float(0) %}
    {% if outside_temp > 29 and outside_temp <= 30 %}
      Turbo
    {% elif outside_temp > 27 and outside_temp <= 29 %}
      High
    {% elif outside_temp > 25.5 and outside_temp <= 27 %}
      Medium
    {% elif outside_temp > threshold and outside_temp <= 25.5 %}
      Low
    {% elif outside_temp > threshold and outside_temp <= 25 %}
      Quiet
    {% else %}
      unknown
    {% endif %}
condition:
  - condition: numeric_state
    entity_id: !input bedroom_temp_sensor
    above: !input temp_threshold
  - condition: template
    value_template: "{{ state_attr(blueprint.inputs.outside_weather_entity, 'temperature') | float(0) > temp_threshold }}"
  - condition: sun
    after: sunrise
    before: sunset
  - condition: template
    value_template: >-
      {{ not is_state(blueprint.inputs.bedroom_ac_climate, 'on')
         or (state_attr(blueprint.inputs.bedroom_ac_climate, 'fan_mode') != fan_speed and fan_speed != 'unknown') }}
action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not is_state(blueprint.inputs.bedroom_ac_climate, 'on') }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: !input bedroom_ac_climate
          - service: climate.set_temperature
            data:
              entity_id: !input bedroom_ac_climate
              temperature: !input set_ac_temperature
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ fan_speed == 'Turbo' and state_attr(blueprint.inputs.bedroom_ac_climate, 'fan_mode') != 'Turbo' }}"
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: !input bedroom_ac_climate
              fan_mode: Turbo
      - conditions:
          - condition: template
            value_template: "{{ fan_speed == 'High' and state_attr(blueprint.inputs.bedroom_ac_climate, 'fan_mode') != 'High' }}"
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: !input bedroom_ac_climate
              fan_mode: High
      - conditions:
          - condition: template
            value_template: "{{ fan_speed == 'Medium' and state_attr(blueprint.inputs.bedroom_ac_climate, 'fan_mode') != 'Medium' }}"
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: !input bedroom_ac_climate
              fan_mode: Medium
      - conditions:
          - condition: template
            value_template: "{{ fan_speed == 'Low' and state_attr(blueprint.inputs.bedroom_ac_climate, 'fan_mode') != 'Low' }}"
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: !input bedroom_ac_climate
              fan_mode: Low
      - conditions:
          - condition: template
            value_template: "{{ fan_speed == 'Quiet' and state_attr(blueprint.inputs.bedroom_ac_climate, 'fan_mode') != 'Quiet' }}"
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: !input bedroom_ac_climate
              fan_mode: Quiet
  - service: "{{ mobile_notify_target }}"
    data:
      title: "Bedroom: {{ bedroom_temp }}°C | Outside: {{ outside_temp }}°C"
      message: >-
        Turning on AC{% if not is_state(blueprint.inputs.bedroom_ac_climate, 'on') %} to {{ set_ac_temperature }}°C{% endif %} (fan: {{ fan_speed }})
      data:
        sticky: true
        persistent: true
        tag: ac_bedroom
        alert_once: true
        notification_icon: mdi:air-conditioner
        channel: Temperature
        group: TEMPARATURE
        color: yellow
