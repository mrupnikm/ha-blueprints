blueprint:
  name: AC Control with Fan Speed & Action Picker Notification (Room Generic, No Entity Defaults)
  description: >
    Turns on the AC if both the room and outside temperature (from weather entity) are above the threshold, AND AC is not already on, AND only during sun up (between sunrise and sunset). Adjusts AC fan speed (Quiet, Low, Medium, High, Turbo) based on the outside temperature attribute. Notifies (or performs any action) when AC is turned on or fan speed changes, with dynamic temperature and fan speed info. Lets you select any action(s) (notify, TTS, script, etc.) using the action picker for notification steps. No default entities or states are referenced.
  domain: automation
  input:
    notify_action:
      name: Notification or Custom Action(s)
      description: Action(s) to perform on notification (use action picker). You can use variables: notify_title and notify_message
      selector:
        action: {}
    ac_entity:
      name: AC Climate Entity
      description: The climate entity controlling your AC
      selector:
        entity:
          domain: climate
    room_temp_sensor:
      name: Room Temperature Sensor
      description: Sensor for room temperature
      selector:
        entity:
          domain: sensor
          device_class: temperature
    outside_temp_weather:
      name: Outside Weather Entity
      description: Weather entity containing the outside temperature attribute
      selector:
        entity:
          domain: weather
    room_temp_threshold:
      name: Room Temp Threshold
      description: Minimum room temperature to trigger AC
      default: 24.5
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: "°C"
    outside_temp_threshold:
      name: Outside Temp Threshold
      description: Minimum outside temperature to trigger AC
      default: 24.5
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: "°C"
    set_ac_temperature:
      name: Set AC Temperature
      description: The temperature to set your AC to when turning on
      default: 22
      selector:
        number:
          min: 16
          max: 30
          step: 0.5
          unit_of_measurement: "°C"

trigger:
  - platform: time_pattern
    minutes: "/10"

condition:
  - condition: numeric_state
    entity_id: !input room_temp_sensor
    above: !input room_temp_threshold
  - condition: template
    value_template: >
      {{ state_attr(inputs.outside_temp_weather, 'temperature') | float(0) > inputs.outside_temp_threshold }}
  - condition: sun
    after: sunrise
    before: sunset

variables:
  outside_temp: "{{ state_attr(inputs.outside_temp_weather, 'temperature') | float(0) }}"
  room_temp: "{{ states(inputs.room_temp_sensor) | float(0) }}"
  temp_threshold: !input room_temp_threshold
  set_ac_temperature: !input set_ac_temperature
  ac_entity: !input ac_entity
  fan_speed: |-
    {% if outside_temp > 29 and outside_temp <= 30 %}
      Turbo
    {% elif outside_temp > 27 and outside_temp <= 29 %}
      High
    {% elif outside_temp > 25.5 and outside_temp <= 27 %}
      Medium
    {% elif outside_temp > temp_threshold and outside_temp <= 25.5 %}
      Low
    {% elif outside_temp > temp_threshold and outside_temp <= 25 %}
      Quiet
    {% else %}
      unknown
    {% endif %}
  notify_title: "Room: {{ room_temp }}°C | Outside: {{ outside_temp }}°C"
  notify_message_on: "Turning on AC to {{ set_ac_temperature }}°C (fan: {{ fan_speed }})"
  notify_message_fan: "Setting AC fan mode to {{ fan_speed }}"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not is_state(ac_entity, 'cool') }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: "{{ ac_entity }}"
          - service: climate.set_temperature
            data:
              entity_id: "{{ ac_entity }}"
              temperature: "{{ set_ac_temperature }}"
          - variables:
              notify_message: "{{ notify_message_on }}"
          - choose: []
            default: !input notify_action
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Turbo' and state_attr(ac_entity, 'fan_mode') != 'Turbo' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Turbo
          - variables:
              notify_message: "{{ notify_message_fan }}"
          - choose: []
            default: !input notify_action
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'High' and state_attr(ac_entity, 'fan_mode') != 'High' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: High
          - variables:
              notify_message: "{{ notify_message_fan }}"
          - choose: []
            default: !input notify_action
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Medium' and state_attr(ac_entity, 'fan_mode') != 'Medium' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Medium
          - variables:
              notify_message: "{{ notify_message_fan }}"
          - choose: []
            default: !input notify_action
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Low' and state_attr(ac_entity, 'fan_mode') != 'Low' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Low
          - variables:
              notify_message: "{{ notify_message_fan }}"
          - choose: []
            default: !input notify_action
      - conditions:
          - condition: template
            value_template: >
              {{ fan_speed == 'Quiet' and state_attr(ac_entity, 'fan_mode') != 'Quiet' }}
        sequence:
          - service: climate.set_fan_mode
            data:
              entity_id: "{{ ac_entity }}"
              fan_mode: Quiet
          - variables:
              notify_message: "{{ notify_message_fan }}"
          - choose: []
            default: !input notify_action

mode: single
